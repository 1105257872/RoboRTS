// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: camera.proto

#ifndef PROTOBUF_camera_2eproto__INCLUDED
#define PROTOBUF_camera_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace rrts {
namespace drivers {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_camera_2eproto();
void protobuf_AssignDesc_camera_2eproto();
void protobuf_ShutdownFile_camera_2eproto();

class CameraMatrix;
class CameraDistortion;
class Resolution;
class Camera;
class Cameras;

enum Mode {
  VIDEO = 1,
  CAMERA = 2
};
bool Mode_IsValid(int value);
const Mode Mode_MIN = VIDEO;
const Mode Mode_MAX = CAMERA;
const int Mode_ARRAYSIZE = Mode_MAX + 1;

const ::google::protobuf::EnumDescriptor* Mode_descriptor();
inline const ::std::string& Mode_Name(Mode value) {
  return ::google::protobuf::internal::NameOfEnum(
    Mode_descriptor(), value);
}
inline bool Mode_Parse(
    const ::std::string& name, Mode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Mode>(
    Mode_descriptor(), name, value);
}
// ===================================================================

class CameraMatrix : public ::google::protobuf::Message {
 public:
  CameraMatrix();
  virtual ~CameraMatrix();

  CameraMatrix(const CameraMatrix& from);

  inline CameraMatrix& operator=(const CameraMatrix& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CameraMatrix& default_instance();

  void Swap(CameraMatrix* other);

  // implements Message ----------------------------------------------

  CameraMatrix* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CameraMatrix& from);
  void MergeFrom(const CameraMatrix& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double data = 1;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline double data(int index) const;
  inline void set_data(int index, double value);
  inline void add_data(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      data() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:rrts.drivers.CameraMatrix)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< double > data_;
  friend void  protobuf_AddDesc_camera_2eproto();
  friend void protobuf_AssignDesc_camera_2eproto();
  friend void protobuf_ShutdownFile_camera_2eproto();

  void InitAsDefaultInstance();
  static CameraMatrix* default_instance_;
};
// -------------------------------------------------------------------

class CameraDistortion : public ::google::protobuf::Message {
 public:
  CameraDistortion();
  virtual ~CameraDistortion();

  CameraDistortion(const CameraDistortion& from);

  inline CameraDistortion& operator=(const CameraDistortion& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CameraDistortion& default_instance();

  void Swap(CameraDistortion* other);

  // implements Message ----------------------------------------------

  CameraDistortion* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CameraDistortion& from);
  void MergeFrom(const CameraDistortion& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double data = 1;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline double data(int index) const;
  inline void set_data(int index, double value);
  inline void add_data(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      data() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:rrts.drivers.CameraDistortion)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< double > data_;
  friend void  protobuf_AddDesc_camera_2eproto();
  friend void protobuf_AssignDesc_camera_2eproto();
  friend void protobuf_ShutdownFile_camera_2eproto();

  void InitAsDefaultInstance();
  static CameraDistortion* default_instance_;
};
// -------------------------------------------------------------------

class Resolution : public ::google::protobuf::Message {
 public:
  Resolution();
  virtual ~Resolution();

  Resolution(const Resolution& from);

  inline Resolution& operator=(const Resolution& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Resolution& default_instance();

  void Swap(Resolution* other);

  // implements Message ----------------------------------------------

  Resolution* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Resolution& from);
  void MergeFrom(const Resolution& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 width = 1;
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 1;
  inline ::google::protobuf::uint32 width() const;
  inline void set_width(::google::protobuf::uint32 value);

  // required uint32 height = 2;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 2;
  inline ::google::protobuf::uint32 height() const;
  inline void set_height(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:rrts.drivers.Resolution)
 private:
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_height();
  inline void clear_has_height();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 width_;
  ::google::protobuf::uint32 height_;
  friend void  protobuf_AddDesc_camera_2eproto();
  friend void protobuf_AssignDesc_camera_2eproto();
  friend void protobuf_ShutdownFile_camera_2eproto();

  void InitAsDefaultInstance();
  static Resolution* default_instance_;
};
// -------------------------------------------------------------------

class Camera : public ::google::protobuf::Message {
 public:
  Camera();
  virtual ~Camera();

  Camera(const Camera& from);

  inline Camera& operator=(const Camera& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Camera& default_instance();

  void Swap(Camera* other);

  // implements Message ----------------------------------------------

  Camera* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Camera& from);
  void MergeFrom(const Camera& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .rrts.drivers.Mode mode = 1;
  inline bool has_mode() const;
  inline void clear_mode();
  static const int kModeFieldNumber = 1;
  inline ::rrts::drivers::Mode mode() const;
  inline void set_mode(::rrts::drivers::Mode value);

  // required uint32 camera_id = 2;
  inline bool has_camera_id() const;
  inline void clear_camera_id();
  static const int kCameraIdFieldNumber = 2;
  inline ::google::protobuf::uint32 camera_id() const;
  inline void set_camera_id(::google::protobuf::uint32 value);

  // required string video_path = 3;
  inline bool has_video_path() const;
  inline void clear_video_path();
  static const int kVideoPathFieldNumber = 3;
  inline const ::std::string& video_path() const;
  inline void set_video_path(const ::std::string& value);
  inline void set_video_path(const char* value);
  inline void set_video_path(const char* value, size_t size);
  inline ::std::string* mutable_video_path();
  inline ::std::string* release_video_path();
  inline void set_allocated_video_path(::std::string* video_path);

  // required .rrts.drivers.CameraMatrix camera_matrix = 4;
  inline bool has_camera_matrix() const;
  inline void clear_camera_matrix();
  static const int kCameraMatrixFieldNumber = 4;
  inline const ::rrts::drivers::CameraMatrix& camera_matrix() const;
  inline ::rrts::drivers::CameraMatrix* mutable_camera_matrix();
  inline ::rrts::drivers::CameraMatrix* release_camera_matrix();
  inline void set_allocated_camera_matrix(::rrts::drivers::CameraMatrix* camera_matrix);

  // required .rrts.drivers.CameraDistortion camera_distortion = 5;
  inline bool has_camera_distortion() const;
  inline void clear_camera_distortion();
  static const int kCameraDistortionFieldNumber = 5;
  inline const ::rrts::drivers::CameraDistortion& camera_distortion() const;
  inline ::rrts::drivers::CameraDistortion* mutable_camera_distortion();
  inline ::rrts::drivers::CameraDistortion* release_camera_distortion();
  inline void set_allocated_camera_distortion(::rrts::drivers::CameraDistortion* camera_distortion);

  // required .rrts.drivers.Resolution resolution = 6;
  inline bool has_resolution() const;
  inline void clear_resolution();
  static const int kResolutionFieldNumber = 6;
  inline const ::rrts::drivers::Resolution& resolution() const;
  inline ::rrts::drivers::Resolution* mutable_resolution();
  inline ::rrts::drivers::Resolution* release_resolution();
  inline void set_allocated_resolution(::rrts::drivers::Resolution* resolution);

  // optional uint32 exposure = 7;
  inline bool has_exposure() const;
  inline void clear_exposure();
  static const int kExposureFieldNumber = 7;
  inline ::google::protobuf::uint32 exposure() const;
  inline void set_exposure(::google::protobuf::uint32 value);

  // optional uint32 contrast = 8;
  inline bool has_contrast() const;
  inline void clear_contrast();
  static const int kContrastFieldNumber = 8;
  inline ::google::protobuf::uint32 contrast() const;
  inline void set_contrast(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:rrts.drivers.Camera)
 private:
  inline void set_has_mode();
  inline void clear_has_mode();
  inline void set_has_camera_id();
  inline void clear_has_camera_id();
  inline void set_has_video_path();
  inline void clear_has_video_path();
  inline void set_has_camera_matrix();
  inline void clear_has_camera_matrix();
  inline void set_has_camera_distortion();
  inline void clear_has_camera_distortion();
  inline void set_has_resolution();
  inline void clear_has_resolution();
  inline void set_has_exposure();
  inline void clear_has_exposure();
  inline void set_has_contrast();
  inline void clear_has_contrast();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int mode_;
  ::google::protobuf::uint32 camera_id_;
  ::std::string* video_path_;
  ::rrts::drivers::CameraMatrix* camera_matrix_;
  ::rrts::drivers::CameraDistortion* camera_distortion_;
  ::rrts::drivers::Resolution* resolution_;
  ::google::protobuf::uint32 exposure_;
  ::google::protobuf::uint32 contrast_;
  friend void  protobuf_AddDesc_camera_2eproto();
  friend void protobuf_AssignDesc_camera_2eproto();
  friend void protobuf_ShutdownFile_camera_2eproto();

  void InitAsDefaultInstance();
  static Camera* default_instance_;
};
// -------------------------------------------------------------------

class Cameras : public ::google::protobuf::Message {
 public:
  Cameras();
  virtual ~Cameras();

  Cameras(const Cameras& from);

  inline Cameras& operator=(const Cameras& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Cameras& default_instance();

  void Swap(Cameras* other);

  // implements Message ----------------------------------------------

  Cameras* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Cameras& from);
  void MergeFrom(const Cameras& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .rrts.drivers.Camera camera = 1;
  inline int camera_size() const;
  inline void clear_camera();
  static const int kCameraFieldNumber = 1;
  inline const ::rrts::drivers::Camera& camera(int index) const;
  inline ::rrts::drivers::Camera* mutable_camera(int index);
  inline ::rrts::drivers::Camera* add_camera();
  inline const ::google::protobuf::RepeatedPtrField< ::rrts::drivers::Camera >&
      camera() const;
  inline ::google::protobuf::RepeatedPtrField< ::rrts::drivers::Camera >*
      mutable_camera();

  // @@protoc_insertion_point(class_scope:rrts.drivers.Cameras)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::rrts::drivers::Camera > camera_;
  friend void  protobuf_AddDesc_camera_2eproto();
  friend void protobuf_AssignDesc_camera_2eproto();
  friend void protobuf_ShutdownFile_camera_2eproto();

  void InitAsDefaultInstance();
  static Cameras* default_instance_;
};
// ===================================================================


// ===================================================================

// CameraMatrix

// repeated double data = 1;
inline int CameraMatrix::data_size() const {
  return data_.size();
}
inline void CameraMatrix::clear_data() {
  data_.Clear();
}
inline double CameraMatrix::data(int index) const {
  // @@protoc_insertion_point(field_get:rrts.drivers.CameraMatrix.data)
  return data_.Get(index);
}
inline void CameraMatrix::set_data(int index, double value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:rrts.drivers.CameraMatrix.data)
}
inline void CameraMatrix::add_data(double value) {
  data_.Add(value);
  // @@protoc_insertion_point(field_add:rrts.drivers.CameraMatrix.data)
}
inline const ::google::protobuf::RepeatedField< double >&
CameraMatrix::data() const {
  // @@protoc_insertion_point(field_list:rrts.drivers.CameraMatrix.data)
  return data_;
}
inline ::google::protobuf::RepeatedField< double >*
CameraMatrix::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:rrts.drivers.CameraMatrix.data)
  return &data_;
}

// -------------------------------------------------------------------

// CameraDistortion

// repeated double data = 1;
inline int CameraDistortion::data_size() const {
  return data_.size();
}
inline void CameraDistortion::clear_data() {
  data_.Clear();
}
inline double CameraDistortion::data(int index) const {
  // @@protoc_insertion_point(field_get:rrts.drivers.CameraDistortion.data)
  return data_.Get(index);
}
inline void CameraDistortion::set_data(int index, double value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:rrts.drivers.CameraDistortion.data)
}
inline void CameraDistortion::add_data(double value) {
  data_.Add(value);
  // @@protoc_insertion_point(field_add:rrts.drivers.CameraDistortion.data)
}
inline const ::google::protobuf::RepeatedField< double >&
CameraDistortion::data() const {
  // @@protoc_insertion_point(field_list:rrts.drivers.CameraDistortion.data)
  return data_;
}
inline ::google::protobuf::RepeatedField< double >*
CameraDistortion::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:rrts.drivers.CameraDistortion.data)
  return &data_;
}

// -------------------------------------------------------------------

// Resolution

// required uint32 width = 1;
inline bool Resolution::has_width() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Resolution::set_has_width() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Resolution::clear_has_width() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Resolution::clear_width() {
  width_ = 0u;
  clear_has_width();
}
inline ::google::protobuf::uint32 Resolution::width() const {
  // @@protoc_insertion_point(field_get:rrts.drivers.Resolution.width)
  return width_;
}
inline void Resolution::set_width(::google::protobuf::uint32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:rrts.drivers.Resolution.width)
}

// required uint32 height = 2;
inline bool Resolution::has_height() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Resolution::set_has_height() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Resolution::clear_has_height() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Resolution::clear_height() {
  height_ = 0u;
  clear_has_height();
}
inline ::google::protobuf::uint32 Resolution::height() const {
  // @@protoc_insertion_point(field_get:rrts.drivers.Resolution.height)
  return height_;
}
inline void Resolution::set_height(::google::protobuf::uint32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:rrts.drivers.Resolution.height)
}

// -------------------------------------------------------------------

// Camera

// required .rrts.drivers.Mode mode = 1;
inline bool Camera::has_mode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Camera::set_has_mode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Camera::clear_has_mode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Camera::clear_mode() {
  mode_ = 1;
  clear_has_mode();
}
inline ::rrts::drivers::Mode Camera::mode() const {
  // @@protoc_insertion_point(field_get:rrts.drivers.Camera.mode)
  return static_cast< ::rrts::drivers::Mode >(mode_);
}
inline void Camera::set_mode(::rrts::drivers::Mode value) {
  assert(::rrts::drivers::Mode_IsValid(value));
  set_has_mode();
  mode_ = value;
  // @@protoc_insertion_point(field_set:rrts.drivers.Camera.mode)
}

// required uint32 camera_id = 2;
inline bool Camera::has_camera_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Camera::set_has_camera_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Camera::clear_has_camera_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Camera::clear_camera_id() {
  camera_id_ = 0u;
  clear_has_camera_id();
}
inline ::google::protobuf::uint32 Camera::camera_id() const {
  // @@protoc_insertion_point(field_get:rrts.drivers.Camera.camera_id)
  return camera_id_;
}
inline void Camera::set_camera_id(::google::protobuf::uint32 value) {
  set_has_camera_id();
  camera_id_ = value;
  // @@protoc_insertion_point(field_set:rrts.drivers.Camera.camera_id)
}

// required string video_path = 3;
inline bool Camera::has_video_path() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Camera::set_has_video_path() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Camera::clear_has_video_path() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Camera::clear_video_path() {
  if (video_path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    video_path_->clear();
  }
  clear_has_video_path();
}
inline const ::std::string& Camera::video_path() const {
  // @@protoc_insertion_point(field_get:rrts.drivers.Camera.video_path)
  return *video_path_;
}
inline void Camera::set_video_path(const ::std::string& value) {
  set_has_video_path();
  if (video_path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    video_path_ = new ::std::string;
  }
  video_path_->assign(value);
  // @@protoc_insertion_point(field_set:rrts.drivers.Camera.video_path)
}
inline void Camera::set_video_path(const char* value) {
  set_has_video_path();
  if (video_path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    video_path_ = new ::std::string;
  }
  video_path_->assign(value);
  // @@protoc_insertion_point(field_set_char:rrts.drivers.Camera.video_path)
}
inline void Camera::set_video_path(const char* value, size_t size) {
  set_has_video_path();
  if (video_path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    video_path_ = new ::std::string;
  }
  video_path_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:rrts.drivers.Camera.video_path)
}
inline ::std::string* Camera::mutable_video_path() {
  set_has_video_path();
  if (video_path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    video_path_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:rrts.drivers.Camera.video_path)
  return video_path_;
}
inline ::std::string* Camera::release_video_path() {
  clear_has_video_path();
  if (video_path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = video_path_;
    video_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Camera::set_allocated_video_path(::std::string* video_path) {
  if (video_path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete video_path_;
  }
  if (video_path) {
    set_has_video_path();
    video_path_ = video_path;
  } else {
    clear_has_video_path();
    video_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:rrts.drivers.Camera.video_path)
}

// required .rrts.drivers.CameraMatrix camera_matrix = 4;
inline bool Camera::has_camera_matrix() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Camera::set_has_camera_matrix() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Camera::clear_has_camera_matrix() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Camera::clear_camera_matrix() {
  if (camera_matrix_ != NULL) camera_matrix_->::rrts::drivers::CameraMatrix::Clear();
  clear_has_camera_matrix();
}
inline const ::rrts::drivers::CameraMatrix& Camera::camera_matrix() const {
  // @@protoc_insertion_point(field_get:rrts.drivers.Camera.camera_matrix)
  return camera_matrix_ != NULL ? *camera_matrix_ : *default_instance_->camera_matrix_;
}
inline ::rrts::drivers::CameraMatrix* Camera::mutable_camera_matrix() {
  set_has_camera_matrix();
  if (camera_matrix_ == NULL) camera_matrix_ = new ::rrts::drivers::CameraMatrix;
  // @@protoc_insertion_point(field_mutable:rrts.drivers.Camera.camera_matrix)
  return camera_matrix_;
}
inline ::rrts::drivers::CameraMatrix* Camera::release_camera_matrix() {
  clear_has_camera_matrix();
  ::rrts::drivers::CameraMatrix* temp = camera_matrix_;
  camera_matrix_ = NULL;
  return temp;
}
inline void Camera::set_allocated_camera_matrix(::rrts::drivers::CameraMatrix* camera_matrix) {
  delete camera_matrix_;
  camera_matrix_ = camera_matrix;
  if (camera_matrix) {
    set_has_camera_matrix();
  } else {
    clear_has_camera_matrix();
  }
  // @@protoc_insertion_point(field_set_allocated:rrts.drivers.Camera.camera_matrix)
}

// required .rrts.drivers.CameraDistortion camera_distortion = 5;
inline bool Camera::has_camera_distortion() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Camera::set_has_camera_distortion() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Camera::clear_has_camera_distortion() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Camera::clear_camera_distortion() {
  if (camera_distortion_ != NULL) camera_distortion_->::rrts::drivers::CameraDistortion::Clear();
  clear_has_camera_distortion();
}
inline const ::rrts::drivers::CameraDistortion& Camera::camera_distortion() const {
  // @@protoc_insertion_point(field_get:rrts.drivers.Camera.camera_distortion)
  return camera_distortion_ != NULL ? *camera_distortion_ : *default_instance_->camera_distortion_;
}
inline ::rrts::drivers::CameraDistortion* Camera::mutable_camera_distortion() {
  set_has_camera_distortion();
  if (camera_distortion_ == NULL) camera_distortion_ = new ::rrts::drivers::CameraDistortion;
  // @@protoc_insertion_point(field_mutable:rrts.drivers.Camera.camera_distortion)
  return camera_distortion_;
}
inline ::rrts::drivers::CameraDistortion* Camera::release_camera_distortion() {
  clear_has_camera_distortion();
  ::rrts::drivers::CameraDistortion* temp = camera_distortion_;
  camera_distortion_ = NULL;
  return temp;
}
inline void Camera::set_allocated_camera_distortion(::rrts::drivers::CameraDistortion* camera_distortion) {
  delete camera_distortion_;
  camera_distortion_ = camera_distortion;
  if (camera_distortion) {
    set_has_camera_distortion();
  } else {
    clear_has_camera_distortion();
  }
  // @@protoc_insertion_point(field_set_allocated:rrts.drivers.Camera.camera_distortion)
}

// required .rrts.drivers.Resolution resolution = 6;
inline bool Camera::has_resolution() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Camera::set_has_resolution() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Camera::clear_has_resolution() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Camera::clear_resolution() {
  if (resolution_ != NULL) resolution_->::rrts::drivers::Resolution::Clear();
  clear_has_resolution();
}
inline const ::rrts::drivers::Resolution& Camera::resolution() const {
  // @@protoc_insertion_point(field_get:rrts.drivers.Camera.resolution)
  return resolution_ != NULL ? *resolution_ : *default_instance_->resolution_;
}
inline ::rrts::drivers::Resolution* Camera::mutable_resolution() {
  set_has_resolution();
  if (resolution_ == NULL) resolution_ = new ::rrts::drivers::Resolution;
  // @@protoc_insertion_point(field_mutable:rrts.drivers.Camera.resolution)
  return resolution_;
}
inline ::rrts::drivers::Resolution* Camera::release_resolution() {
  clear_has_resolution();
  ::rrts::drivers::Resolution* temp = resolution_;
  resolution_ = NULL;
  return temp;
}
inline void Camera::set_allocated_resolution(::rrts::drivers::Resolution* resolution) {
  delete resolution_;
  resolution_ = resolution;
  if (resolution) {
    set_has_resolution();
  } else {
    clear_has_resolution();
  }
  // @@protoc_insertion_point(field_set_allocated:rrts.drivers.Camera.resolution)
}

// optional uint32 exposure = 7;
inline bool Camera::has_exposure() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Camera::set_has_exposure() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Camera::clear_has_exposure() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Camera::clear_exposure() {
  exposure_ = 0u;
  clear_has_exposure();
}
inline ::google::protobuf::uint32 Camera::exposure() const {
  // @@protoc_insertion_point(field_get:rrts.drivers.Camera.exposure)
  return exposure_;
}
inline void Camera::set_exposure(::google::protobuf::uint32 value) {
  set_has_exposure();
  exposure_ = value;
  // @@protoc_insertion_point(field_set:rrts.drivers.Camera.exposure)
}

// optional uint32 contrast = 8;
inline bool Camera::has_contrast() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Camera::set_has_contrast() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Camera::clear_has_contrast() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Camera::clear_contrast() {
  contrast_ = 0u;
  clear_has_contrast();
}
inline ::google::protobuf::uint32 Camera::contrast() const {
  // @@protoc_insertion_point(field_get:rrts.drivers.Camera.contrast)
  return contrast_;
}
inline void Camera::set_contrast(::google::protobuf::uint32 value) {
  set_has_contrast();
  contrast_ = value;
  // @@protoc_insertion_point(field_set:rrts.drivers.Camera.contrast)
}

// -------------------------------------------------------------------

// Cameras

// repeated .rrts.drivers.Camera camera = 1;
inline int Cameras::camera_size() const {
  return camera_.size();
}
inline void Cameras::clear_camera() {
  camera_.Clear();
}
inline const ::rrts::drivers::Camera& Cameras::camera(int index) const {
  // @@protoc_insertion_point(field_get:rrts.drivers.Cameras.camera)
  return camera_.Get(index);
}
inline ::rrts::drivers::Camera* Cameras::mutable_camera(int index) {
  // @@protoc_insertion_point(field_mutable:rrts.drivers.Cameras.camera)
  return camera_.Mutable(index);
}
inline ::rrts::drivers::Camera* Cameras::add_camera() {
  // @@protoc_insertion_point(field_add:rrts.drivers.Cameras.camera)
  return camera_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rrts::drivers::Camera >&
Cameras::camera() const {
  // @@protoc_insertion_point(field_list:rrts.drivers.Cameras.camera)
  return camera_;
}
inline ::google::protobuf::RepeatedPtrField< ::rrts::drivers::Camera >*
Cameras::mutable_camera() {
  // @@protoc_insertion_point(field_mutable_list:rrts.drivers.Cameras.camera)
  return &camera_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace drivers
}  // namespace rrts

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::rrts::drivers::Mode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rrts::drivers::Mode>() {
  return ::rrts::drivers::Mode_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_camera_2eproto__INCLUDED
