// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: camera.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "camera.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace rrts {
namespace drivers {

namespace {

const ::google::protobuf::Descriptor* CameraMatrix_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CameraMatrix_reflection_ = NULL;
const ::google::protobuf::Descriptor* CameraDistortion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CameraDistortion_reflection_ = NULL;
const ::google::protobuf::Descriptor* Resolution_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Resolution_reflection_ = NULL;
const ::google::protobuf::Descriptor* Camera_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Camera_reflection_ = NULL;
const ::google::protobuf::Descriptor* Cameras_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Cameras_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Mode_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_camera_2eproto() {
  protobuf_AddDesc_camera_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "camera.proto");
  GOOGLE_CHECK(file != NULL);
  CameraMatrix_descriptor_ = file->message_type(0);
  static const int CameraMatrix_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraMatrix, data_),
  };
  CameraMatrix_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CameraMatrix_descriptor_,
      CameraMatrix::default_instance_,
      CameraMatrix_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraMatrix, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraMatrix, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CameraMatrix));
  CameraDistortion_descriptor_ = file->message_type(1);
  static const int CameraDistortion_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraDistortion, data_),
  };
  CameraDistortion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CameraDistortion_descriptor_,
      CameraDistortion::default_instance_,
      CameraDistortion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraDistortion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraDistortion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CameraDistortion));
  Resolution_descriptor_ = file->message_type(2);
  static const int Resolution_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resolution, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resolution, height_),
  };
  Resolution_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Resolution_descriptor_,
      Resolution::default_instance_,
      Resolution_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resolution, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resolution, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Resolution));
  Camera_descriptor_ = file->message_type(3);
  static const int Camera_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Camera, mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Camera, camera_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Camera, video_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Camera, camera_matrix_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Camera, camera_distortion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Camera, resolution_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Camera, exposure_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Camera, contrast_),
  };
  Camera_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Camera_descriptor_,
      Camera::default_instance_,
      Camera_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Camera, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Camera, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Camera));
  Cameras_descriptor_ = file->message_type(4);
  static const int Cameras_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cameras, camera_),
  };
  Cameras_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Cameras_descriptor_,
      Cameras::default_instance_,
      Cameras_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cameras, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cameras, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Cameras));
  Mode_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_camera_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CameraMatrix_descriptor_, &CameraMatrix::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CameraDistortion_descriptor_, &CameraDistortion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Resolution_descriptor_, &Resolution::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Camera_descriptor_, &Camera::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Cameras_descriptor_, &Cameras::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_camera_2eproto() {
  delete CameraMatrix::default_instance_;
  delete CameraMatrix_reflection_;
  delete CameraDistortion::default_instance_;
  delete CameraDistortion_reflection_;
  delete Resolution::default_instance_;
  delete Resolution_reflection_;
  delete Camera::default_instance_;
  delete Camera_reflection_;
  delete Cameras::default_instance_;
  delete Cameras_reflection_;
}

void protobuf_AddDesc_camera_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014camera.proto\022\014rrts.drivers\"\034\n\014CameraMa"
    "trix\022\014\n\004data\030\001 \003(\001\" \n\020CameraDistortion\022\014"
    "\n\004data\030\001 \003(\001\"+\n\nResolution\022\r\n\005width\030\001 \002("
    "\r\022\016\n\006height\030\002 \002(\r\"\221\002\n\006Camera\022 \n\004mode\030\001 \002"
    "(\0162\022.rrts.drivers.Mode\022\021\n\tcamera_id\030\002 \002("
    "\r\022\022\n\nvideo_path\030\003 \002(\t\0221\n\rcamera_matrix\030\004"
    " \002(\0132\032.rrts.drivers.CameraMatrix\0229\n\021came"
    "ra_distortion\030\005 \002(\0132\036.rrts.drivers.Camer"
    "aDistortion\022,\n\nresolution\030\006 \002(\0132\030.rrts.d"
    "rivers.Resolution\022\020\n\010exposure\030\007 \001(\r\022\020\n\010c"
    "ontrast\030\010 \001(\r\"/\n\007Cameras\022$\n\006camera\030\001 \003(\013"
    "2\024.rrts.drivers.Camera*\035\n\004Mode\022\t\n\005VIDEO\020"
    "\001\022\n\n\006CAMERA\020\002", 493);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "camera.proto", &protobuf_RegisterTypes);
  CameraMatrix::default_instance_ = new CameraMatrix();
  CameraDistortion::default_instance_ = new CameraDistortion();
  Resolution::default_instance_ = new Resolution();
  Camera::default_instance_ = new Camera();
  Cameras::default_instance_ = new Cameras();
  CameraMatrix::default_instance_->InitAsDefaultInstance();
  CameraDistortion::default_instance_->InitAsDefaultInstance();
  Resolution::default_instance_->InitAsDefaultInstance();
  Camera::default_instance_->InitAsDefaultInstance();
  Cameras::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_camera_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_camera_2eproto {
  StaticDescriptorInitializer_camera_2eproto() {
    protobuf_AddDesc_camera_2eproto();
  }
} static_descriptor_initializer_camera_2eproto_;
const ::google::protobuf::EnumDescriptor* Mode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Mode_descriptor_;
}
bool Mode_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int CameraMatrix::kDataFieldNumber;
#endif  // !_MSC_VER

CameraMatrix::CameraMatrix()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rrts.drivers.CameraMatrix)
}

void CameraMatrix::InitAsDefaultInstance() {
}

CameraMatrix::CameraMatrix(const CameraMatrix& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rrts.drivers.CameraMatrix)
}

void CameraMatrix::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CameraMatrix::~CameraMatrix() {
  // @@protoc_insertion_point(destructor:rrts.drivers.CameraMatrix)
  SharedDtor();
}

void CameraMatrix::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CameraMatrix::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CameraMatrix::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CameraMatrix_descriptor_;
}

const CameraMatrix& CameraMatrix::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_camera_2eproto();
  return *default_instance_;
}

CameraMatrix* CameraMatrix::default_instance_ = NULL;

CameraMatrix* CameraMatrix::New() const {
  return new CameraMatrix;
}

void CameraMatrix::Clear() {
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CameraMatrix::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rrts.drivers.CameraMatrix)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double data = 1;
      case 1: {
        if (tag == 9) {
         parse_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 9, input, this->mutable_data())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_data())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(9)) goto parse_data;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rrts.drivers.CameraMatrix)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rrts.drivers.CameraMatrix)
  return false;
#undef DO_
}

void CameraMatrix::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rrts.drivers.CameraMatrix)
  // repeated double data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      1, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:rrts.drivers.CameraMatrix)
}

::google::protobuf::uint8* CameraMatrix::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rrts.drivers.CameraMatrix)
  // repeated double data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(1, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rrts.drivers.CameraMatrix)
  return target;
}

int CameraMatrix::ByteSize() const {
  int total_size = 0;

  // repeated double data = 1;
  {
    int data_size = 0;
    data_size = 8 * this->data_size();
    total_size += 1 * this->data_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CameraMatrix::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CameraMatrix* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CameraMatrix*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CameraMatrix::MergeFrom(const CameraMatrix& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CameraMatrix::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraMatrix::CopyFrom(const CameraMatrix& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraMatrix::IsInitialized() const {

  return true;
}

void CameraMatrix::Swap(CameraMatrix* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CameraMatrix::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CameraMatrix_descriptor_;
  metadata.reflection = CameraMatrix_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CameraDistortion::kDataFieldNumber;
#endif  // !_MSC_VER

CameraDistortion::CameraDistortion()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rrts.drivers.CameraDistortion)
}

void CameraDistortion::InitAsDefaultInstance() {
}

CameraDistortion::CameraDistortion(const CameraDistortion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rrts.drivers.CameraDistortion)
}

void CameraDistortion::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CameraDistortion::~CameraDistortion() {
  // @@protoc_insertion_point(destructor:rrts.drivers.CameraDistortion)
  SharedDtor();
}

void CameraDistortion::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CameraDistortion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CameraDistortion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CameraDistortion_descriptor_;
}

const CameraDistortion& CameraDistortion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_camera_2eproto();
  return *default_instance_;
}

CameraDistortion* CameraDistortion::default_instance_ = NULL;

CameraDistortion* CameraDistortion::New() const {
  return new CameraDistortion;
}

void CameraDistortion::Clear() {
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CameraDistortion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rrts.drivers.CameraDistortion)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double data = 1;
      case 1: {
        if (tag == 9) {
         parse_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 9, input, this->mutable_data())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_data())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(9)) goto parse_data;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rrts.drivers.CameraDistortion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rrts.drivers.CameraDistortion)
  return false;
#undef DO_
}

void CameraDistortion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rrts.drivers.CameraDistortion)
  // repeated double data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      1, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:rrts.drivers.CameraDistortion)
}

::google::protobuf::uint8* CameraDistortion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rrts.drivers.CameraDistortion)
  // repeated double data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(1, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rrts.drivers.CameraDistortion)
  return target;
}

int CameraDistortion::ByteSize() const {
  int total_size = 0;

  // repeated double data = 1;
  {
    int data_size = 0;
    data_size = 8 * this->data_size();
    total_size += 1 * this->data_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CameraDistortion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CameraDistortion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CameraDistortion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CameraDistortion::MergeFrom(const CameraDistortion& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CameraDistortion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraDistortion::CopyFrom(const CameraDistortion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraDistortion::IsInitialized() const {

  return true;
}

void CameraDistortion::Swap(CameraDistortion* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CameraDistortion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CameraDistortion_descriptor_;
  metadata.reflection = CameraDistortion_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Resolution::kWidthFieldNumber;
const int Resolution::kHeightFieldNumber;
#endif  // !_MSC_VER

Resolution::Resolution()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rrts.drivers.Resolution)
}

void Resolution::InitAsDefaultInstance() {
}

Resolution::Resolution(const Resolution& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rrts.drivers.Resolution)
}

void Resolution::SharedCtor() {
  _cached_size_ = 0;
  width_ = 0u;
  height_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Resolution::~Resolution() {
  // @@protoc_insertion_point(destructor:rrts.drivers.Resolution)
  SharedDtor();
}

void Resolution::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Resolution::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Resolution::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Resolution_descriptor_;
}

const Resolution& Resolution::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_camera_2eproto();
  return *default_instance_;
}

Resolution* Resolution::default_instance_ = NULL;

Resolution* Resolution::New() const {
  return new Resolution;
}

void Resolution::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Resolution*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(width_, height_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Resolution::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rrts.drivers.Resolution)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 width = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_height;
        break;
      }

      // required uint32 height = 2;
      case 2: {
        if (tag == 16) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rrts.drivers.Resolution)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rrts.drivers.Resolution)
  return false;
#undef DO_
}

void Resolution::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rrts.drivers.Resolution)
  // required uint32 width = 1;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->width(), output);
  }

  // required uint32 height = 2;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->height(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:rrts.drivers.Resolution)
}

::google::protobuf::uint8* Resolution::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rrts.drivers.Resolution)
  // required uint32 width = 1;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->width(), target);
  }

  // required uint32 height = 2;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->height(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rrts.drivers.Resolution)
  return target;
}

int Resolution::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 width = 1;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->width());
    }

    // required uint32 height = 2;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->height());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Resolution::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Resolution* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Resolution*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Resolution::MergeFrom(const Resolution& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Resolution::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Resolution::CopyFrom(const Resolution& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Resolution::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Resolution::Swap(Resolution* other) {
  if (other != this) {
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Resolution::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Resolution_descriptor_;
  metadata.reflection = Resolution_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Camera::kModeFieldNumber;
const int Camera::kCameraIdFieldNumber;
const int Camera::kVideoPathFieldNumber;
const int Camera::kCameraMatrixFieldNumber;
const int Camera::kCameraDistortionFieldNumber;
const int Camera::kResolutionFieldNumber;
const int Camera::kExposureFieldNumber;
const int Camera::kContrastFieldNumber;
#endif  // !_MSC_VER

Camera::Camera()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rrts.drivers.Camera)
}

void Camera::InitAsDefaultInstance() {
  camera_matrix_ = const_cast< ::rrts::drivers::CameraMatrix*>(&::rrts::drivers::CameraMatrix::default_instance());
  camera_distortion_ = const_cast< ::rrts::drivers::CameraDistortion*>(&::rrts::drivers::CameraDistortion::default_instance());
  resolution_ = const_cast< ::rrts::drivers::Resolution*>(&::rrts::drivers::Resolution::default_instance());
}

Camera::Camera(const Camera& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rrts.drivers.Camera)
}

void Camera::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  mode_ = 1;
  camera_id_ = 0u;
  video_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  camera_matrix_ = NULL;
  camera_distortion_ = NULL;
  resolution_ = NULL;
  exposure_ = 0u;
  contrast_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Camera::~Camera() {
  // @@protoc_insertion_point(destructor:rrts.drivers.Camera)
  SharedDtor();
}

void Camera::SharedDtor() {
  if (video_path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete video_path_;
  }
  if (this != default_instance_) {
    delete camera_matrix_;
    delete camera_distortion_;
    delete resolution_;
  }
}

void Camera::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Camera::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Camera_descriptor_;
}

const Camera& Camera::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_camera_2eproto();
  return *default_instance_;
}

Camera* Camera::default_instance_ = NULL;

Camera* Camera::New() const {
  return new Camera;
}

void Camera::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Camera*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(exposure_, contrast_);
    mode_ = 1;
    camera_id_ = 0u;
    if (has_video_path()) {
      if (video_path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        video_path_->clear();
      }
    }
    if (has_camera_matrix()) {
      if (camera_matrix_ != NULL) camera_matrix_->::rrts::drivers::CameraMatrix::Clear();
    }
    if (has_camera_distortion()) {
      if (camera_distortion_ != NULL) camera_distortion_->::rrts::drivers::CameraDistortion::Clear();
    }
    if (has_resolution()) {
      if (resolution_ != NULL) resolution_->::rrts::drivers::Resolution::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Camera::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rrts.drivers.Camera)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .rrts.drivers.Mode mode = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::rrts::drivers::Mode_IsValid(value)) {
            set_mode(static_cast< ::rrts::drivers::Mode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_camera_id;
        break;
      }

      // required uint32 camera_id = 2;
      case 2: {
        if (tag == 16) {
         parse_camera_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &camera_id_)));
          set_has_camera_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_video_path;
        break;
      }

      // required string video_path = 3;
      case 3: {
        if (tag == 26) {
         parse_video_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_video_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->video_path().data(), this->video_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "video_path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_camera_matrix;
        break;
      }

      // required .rrts.drivers.CameraMatrix camera_matrix = 4;
      case 4: {
        if (tag == 34) {
         parse_camera_matrix:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_camera_matrix()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_camera_distortion;
        break;
      }

      // required .rrts.drivers.CameraDistortion camera_distortion = 5;
      case 5: {
        if (tag == 42) {
         parse_camera_distortion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_camera_distortion()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_resolution;
        break;
      }

      // required .rrts.drivers.Resolution resolution = 6;
      case 6: {
        if (tag == 50) {
         parse_resolution:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resolution()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_exposure;
        break;
      }

      // optional uint32 exposure = 7;
      case 7: {
        if (tag == 56) {
         parse_exposure:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exposure_)));
          set_has_exposure();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_contrast;
        break;
      }

      // optional uint32 contrast = 8;
      case 8: {
        if (tag == 64) {
         parse_contrast:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &contrast_)));
          set_has_contrast();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rrts.drivers.Camera)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rrts.drivers.Camera)
  return false;
#undef DO_
}

void Camera::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rrts.drivers.Camera)
  // required .rrts.drivers.Mode mode = 1;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mode(), output);
  }

  // required uint32 camera_id = 2;
  if (has_camera_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->camera_id(), output);
  }

  // required string video_path = 3;
  if (has_video_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->video_path().data(), this->video_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "video_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->video_path(), output);
  }

  // required .rrts.drivers.CameraMatrix camera_matrix = 4;
  if (has_camera_matrix()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->camera_matrix(), output);
  }

  // required .rrts.drivers.CameraDistortion camera_distortion = 5;
  if (has_camera_distortion()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->camera_distortion(), output);
  }

  // required .rrts.drivers.Resolution resolution = 6;
  if (has_resolution()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->resolution(), output);
  }

  // optional uint32 exposure = 7;
  if (has_exposure()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->exposure(), output);
  }

  // optional uint32 contrast = 8;
  if (has_contrast()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->contrast(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:rrts.drivers.Camera)
}

::google::protobuf::uint8* Camera::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rrts.drivers.Camera)
  // required .rrts.drivers.Mode mode = 1;
  if (has_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->mode(), target);
  }

  // required uint32 camera_id = 2;
  if (has_camera_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->camera_id(), target);
  }

  // required string video_path = 3;
  if (has_video_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->video_path().data(), this->video_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "video_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->video_path(), target);
  }

  // required .rrts.drivers.CameraMatrix camera_matrix = 4;
  if (has_camera_matrix()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->camera_matrix(), target);
  }

  // required .rrts.drivers.CameraDistortion camera_distortion = 5;
  if (has_camera_distortion()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->camera_distortion(), target);
  }

  // required .rrts.drivers.Resolution resolution = 6;
  if (has_resolution()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->resolution(), target);
  }

  // optional uint32 exposure = 7;
  if (has_exposure()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->exposure(), target);
  }

  // optional uint32 contrast = 8;
  if (has_contrast()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->contrast(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rrts.drivers.Camera)
  return target;
}

int Camera::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .rrts.drivers.Mode mode = 1;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
    }

    // required uint32 camera_id = 2;
    if (has_camera_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->camera_id());
    }

    // required string video_path = 3;
    if (has_video_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->video_path());
    }

    // required .rrts.drivers.CameraMatrix camera_matrix = 4;
    if (has_camera_matrix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->camera_matrix());
    }

    // required .rrts.drivers.CameraDistortion camera_distortion = 5;
    if (has_camera_distortion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->camera_distortion());
    }

    // required .rrts.drivers.Resolution resolution = 6;
    if (has_resolution()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->resolution());
    }

    // optional uint32 exposure = 7;
    if (has_exposure()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exposure());
    }

    // optional uint32 contrast = 8;
    if (has_contrast()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->contrast());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Camera::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Camera* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Camera*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Camera::MergeFrom(const Camera& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mode()) {
      set_mode(from.mode());
    }
    if (from.has_camera_id()) {
      set_camera_id(from.camera_id());
    }
    if (from.has_video_path()) {
      set_video_path(from.video_path());
    }
    if (from.has_camera_matrix()) {
      mutable_camera_matrix()->::rrts::drivers::CameraMatrix::MergeFrom(from.camera_matrix());
    }
    if (from.has_camera_distortion()) {
      mutable_camera_distortion()->::rrts::drivers::CameraDistortion::MergeFrom(from.camera_distortion());
    }
    if (from.has_resolution()) {
      mutable_resolution()->::rrts::drivers::Resolution::MergeFrom(from.resolution());
    }
    if (from.has_exposure()) {
      set_exposure(from.exposure());
    }
    if (from.has_contrast()) {
      set_contrast(from.contrast());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Camera::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Camera::CopyFrom(const Camera& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Camera::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  if (has_resolution()) {
    if (!this->resolution().IsInitialized()) return false;
  }
  return true;
}

void Camera::Swap(Camera* other) {
  if (other != this) {
    std::swap(mode_, other->mode_);
    std::swap(camera_id_, other->camera_id_);
    std::swap(video_path_, other->video_path_);
    std::swap(camera_matrix_, other->camera_matrix_);
    std::swap(camera_distortion_, other->camera_distortion_);
    std::swap(resolution_, other->resolution_);
    std::swap(exposure_, other->exposure_);
    std::swap(contrast_, other->contrast_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Camera::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Camera_descriptor_;
  metadata.reflection = Camera_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Cameras::kCameraFieldNumber;
#endif  // !_MSC_VER

Cameras::Cameras()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rrts.drivers.Cameras)
}

void Cameras::InitAsDefaultInstance() {
}

Cameras::Cameras(const Cameras& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rrts.drivers.Cameras)
}

void Cameras::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Cameras::~Cameras() {
  // @@protoc_insertion_point(destructor:rrts.drivers.Cameras)
  SharedDtor();
}

void Cameras::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Cameras::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Cameras::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Cameras_descriptor_;
}

const Cameras& Cameras::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_camera_2eproto();
  return *default_instance_;
}

Cameras* Cameras::default_instance_ = NULL;

Cameras* Cameras::New() const {
  return new Cameras;
}

void Cameras::Clear() {
  camera_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Cameras::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rrts.drivers.Cameras)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rrts.drivers.Camera camera = 1;
      case 1: {
        if (tag == 10) {
         parse_camera:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_camera()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_camera;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rrts.drivers.Cameras)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rrts.drivers.Cameras)
  return false;
#undef DO_
}

void Cameras::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rrts.drivers.Cameras)
  // repeated .rrts.drivers.Camera camera = 1;
  for (int i = 0; i < this->camera_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->camera(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:rrts.drivers.Cameras)
}

::google::protobuf::uint8* Cameras::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rrts.drivers.Cameras)
  // repeated .rrts.drivers.Camera camera = 1;
  for (int i = 0; i < this->camera_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->camera(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rrts.drivers.Cameras)
  return target;
}

int Cameras::ByteSize() const {
  int total_size = 0;

  // repeated .rrts.drivers.Camera camera = 1;
  total_size += 1 * this->camera_size();
  for (int i = 0; i < this->camera_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->camera(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Cameras::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Cameras* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Cameras*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Cameras::MergeFrom(const Cameras& from) {
  GOOGLE_CHECK_NE(&from, this);
  camera_.MergeFrom(from.camera_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Cameras::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Cameras::CopyFrom(const Cameras& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Cameras::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->camera())) return false;
  return true;
}

void Cameras::Swap(Cameras* other) {
  if (other != this) {
    camera_.Swap(&other->camera_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Cameras::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Cameras_descriptor_;
  metadata.reflection = Cameras_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace drivers
}  // namespace rrts

// @@protoc_insertion_point(global_scope)
